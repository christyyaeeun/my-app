type User @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  username: String
  avatar: String
  status: String
}

type Post @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  description: String
  image: String
  owner: String
}

type Note @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  description: String
  image: String
  createdAt: String
}

type Entry @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  description: String
  image: String
  createdAt: String
}

type Todo @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  description: String
  status: Boolean
}

type Message
  @model
  @key(
    fields: ["eventId", "createdAt"]
    name: "ByEventId"
    queryField: "messagesByEventId"
  )
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  owner: ID
  content: String!
  event: Event @connection(fields: ["eventId"])
  eventId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Subscription {
  onMutateMessage(eventId: ID): Message
    @aws_subscribe(mutations: ["createMessage", "updateMessage"])
}
