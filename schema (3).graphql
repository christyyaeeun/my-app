schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Entry @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: AWSDateTime!
  description: String
  id: ID!
  image: String
  name: String
  owner: String
  updatedAt: AWSDateTime!
}

type Feed @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: AWSDateTime!
  description: String
  entry: Entry
  feedEntryId: ID
  feedOwnerId: ID
  id: ID!
  owner: User
  postedAt: AWSDateTime
  updatedAt: AWSDateTime!
}

type ModelEntryConnection @aws_cognito_user_pools @aws_iam {
  items: [Entry]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelFeedConnection @aws_cognito_user_pools @aws_iam {
  items: [Feed]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelNoteConnection @aws_cognito_user_pools @aws_iam {
  items: [Note]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelPostConnection @aws_cognito_user_pools @aws_iam {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelTodoConnection @aws_cognito_user_pools @aws_iam {
  items: [Todo]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelUserConnection @aws_cognito_user_pools @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

type Mutation {
  createEntry(condition: ModelEntryConditionInput, input: CreateEntryInput!): Entry @aws_cognito_user_pools @aws_iam
  createFeed(condition: ModelFeedConditionInput, input: CreateFeedInput!): Feed @aws_cognito_user_pools @aws_iam
  createNote(condition: ModelNoteConditionInput, input: CreateNoteInput!): Note @aws_cognito_user_pools @aws_iam
  createPost(condition: ModelPostConditionInput, input: CreatePostInput!): Post @aws_cognito_user_pools @aws_iam
  createTodo(condition: ModelTodoConditionInput, input: CreateTodoInput!): Todo @aws_cognito_user_pools @aws_iam
  createUser(condition: ModelUserConditionInput, input: CreateUserInput!): User @aws_cognito_user_pools @aws_iam
  deleteEntry(condition: ModelEntryConditionInput, input: DeleteEntryInput!): Entry @aws_cognito_user_pools @aws_iam
  deleteFeed(condition: ModelFeedConditionInput, input: DeleteFeedInput!): Feed @aws_cognito_user_pools @aws_iam
  deleteNote(condition: ModelNoteConditionInput, input: DeleteNoteInput!): Note @aws_cognito_user_pools @aws_iam
  deletePost(condition: ModelPostConditionInput, input: DeletePostInput!): Post @aws_cognito_user_pools @aws_iam
  deleteTodo(condition: ModelTodoConditionInput, input: DeleteTodoInput!): Todo @aws_cognito_user_pools @aws_iam
  deleteUser(condition: ModelUserConditionInput, input: DeleteUserInput!): User @aws_cognito_user_pools @aws_iam
  updateEntry(condition: ModelEntryConditionInput, input: UpdateEntryInput!): Entry @aws_cognito_user_pools @aws_iam
  updateFeed(condition: ModelFeedConditionInput, input: UpdateFeedInput!): Feed @aws_cognito_user_pools @aws_iam
  updateNote(condition: ModelNoteConditionInput, input: UpdateNoteInput!): Note @aws_cognito_user_pools @aws_iam
  updatePost(condition: ModelPostConditionInput, input: UpdatePostInput!): Post @aws_cognito_user_pools @aws_iam
  updateTodo(condition: ModelTodoConditionInput, input: UpdateTodoInput!): Todo @aws_cognito_user_pools @aws_iam
  updateUser(condition: ModelUserConditionInput, input: UpdateUserInput!): User @aws_cognito_user_pools @aws_iam
}

type Note @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: String!
  description: String
  id: ID!
  image: String
  name: String
  owner: String
  type: String!
  updatedAt: AWSDateTime!
}

type Post @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: AWSDateTime!
  description: String
  id: ID!
  image: String
  name: String
  owner: String
  updatedAt: AWSDateTime!
}

type Query {
  getEntry(id: ID!): Entry @aws_cognito_user_pools @aws_iam
  getFeed(id: ID!): Feed @aws_cognito_user_pools @aws_iam
  getNote(id: ID!): Note @aws_cognito_user_pools @aws_iam
  getPost(id: ID!): Post @aws_cognito_user_pools @aws_iam
  getTodo(id: ID!): Todo @aws_cognito_user_pools @aws_iam
  getUser(id: ID!): User @aws_cognito_user_pools @aws_iam
  listEntries(filter: ModelEntryFilterInput, limit: Int, nextToken: String): ModelEntryConnection @aws_cognito_user_pools @aws_iam
  listFeeds(filter: ModelFeedFilterInput, limit: Int, nextToken: String): ModelFeedConnection @aws_cognito_user_pools @aws_iam
  listNotes(filter: ModelNoteFilterInput, limit: Int, nextToken: String): ModelNoteConnection @aws_cognito_user_pools @aws_iam
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_cognito_user_pools @aws_iam
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection @aws_cognito_user_pools @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_cognito_user_pools @aws_iam
  notesByDate(createdAt: ModelStringKeyConditionInput, filter: ModelNoteFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String!): ModelNoteConnection @aws_cognito_user_pools @aws_iam
  syncEntries(filter: ModelEntryFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelEntryConnection @aws_cognito_user_pools @aws_iam
  syncFeeds(filter: ModelFeedFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelFeedConnection @aws_cognito_user_pools @aws_iam
  syncNotes(filter: ModelNoteFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelNoteConnection @aws_cognito_user_pools @aws_iam
  syncPosts(filter: ModelPostFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelPostConnection @aws_cognito_user_pools @aws_iam
  syncTodos(filter: ModelTodoFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelTodoConnection @aws_cognito_user_pools @aws_iam
  syncUsers(filter: ModelUserFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelUserConnection @aws_cognito_user_pools @aws_iam
}

type Subscription {
  onCreateEntry(owner: String): Entry @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createEntry"])
  onCreateFeed(owner: String): Feed @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createFeed"])
  onCreateNote(owner: String): Note @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createNote"])
  onCreatePost(owner: String): Post @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createPost"])
  onCreateTodo(owner: String): Todo @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createTodo"])
  onCreateUser(owner: String): User @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createUser"])
  onDeleteEntry(owner: String): Entry @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteEntry"])
  onDeleteFeed(owner: String): Feed @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteFeed"])
  onDeleteNote(owner: String): Note @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteNote"])
  onDeletePost(owner: String): Post @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deletePost"])
  onDeleteTodo(owner: String): Todo @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteTodo"])
  onDeleteUser(owner: String): User @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["deleteUser"])
  onUpdateEntry(owner: String): Entry @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateEntry"])
  onUpdateFeed(owner: String): Feed @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateFeed"])
  onUpdateNote(owner: String): Note @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateNote"])
  onUpdatePost(owner: String): Post @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updatePost"])
  onUpdateTodo(owner: String): Todo @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateTodo"])
  onUpdateUser(owner: String): User @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["updateUser"])
}

type Todo @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: AWSDateTime!
  description: String
  id: ID!
  name: String
  owner: String
  updatedAt: AWSDateTime!
}

type User @aws_cognito_user_pools @aws_iam {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  avatar: String
  createdAt: AWSDateTime!
  id: ID!
  owner: String
  status: String
  updatedAt: AWSDateTime!
  username: String
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateEntryInput {
  _version: Int
  description: String
  id: ID
  image: String
  name: String
}

input CreateFeedInput {
  _version: Int
  description: String
  feedEntryId: ID
  feedOwnerId: ID
  id: ID
  postedAt: AWSDateTime
}

input CreateNoteInput {
  _version: Int
  createdAt: String
  description: String
  id: ID
  image: String
  name: String
  type: String!
}

input CreatePostInput {
  _version: Int
  description: String
  id: ID
  image: String
  name: String
  owner: String
}

input CreateTodoInput {
  _version: Int
  description: String
  id: ID
  name: String
}

input CreateUserInput {
  _version: Int
  avatar: String
  id: ID
  status: String
  username: String
}

input DeleteEntryInput {
  _version: Int
  id: ID!
}

input DeleteFeedInput {
  _version: Int
  id: ID!
}

input DeleteNoteInput {
  _version: Int
  id: ID!
}

input DeletePostInput {
  _version: Int
  id: ID!
}

input DeleteTodoInput {
  _version: Int
  id: ID!
}

input DeleteUserInput {
  _version: Int
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelEntryConditionInput {
  and: [ModelEntryConditionInput]
  description: ModelStringInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelEntryConditionInput
  or: [ModelEntryConditionInput]
}

input ModelEntryFilterInput {
  and: [ModelEntryFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelEntryFilterInput
  or: [ModelEntryFilterInput]
}

input ModelFeedConditionInput {
  and: [ModelFeedConditionInput]
  description: ModelStringInput
  feedEntryId: ModelIDInput
  feedOwnerId: ModelIDInput
  not: ModelFeedConditionInput
  or: [ModelFeedConditionInput]
  postedAt: ModelStringInput
}

input ModelFeedFilterInput {
  and: [ModelFeedFilterInput]
  description: ModelStringInput
  feedEntryId: ModelIDInput
  feedOwnerId: ModelIDInput
  id: ModelIDInput
  not: ModelFeedFilterInput
  or: [ModelFeedFilterInput]
  postedAt: ModelStringInput
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelNoteConditionInput {
  and: [ModelNoteConditionInput]
  createdAt: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelNoteConditionInput
  or: [ModelNoteConditionInput]
  type: ModelStringInput
}

input ModelNoteFilterInput {
  and: [ModelNoteFilterInput]
  createdAt: ModelStringInput
  description: ModelStringInput
  id: ModelIDInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelNoteFilterInput
  or: [ModelNoteFilterInput]
  type: ModelStringInput
}

input ModelPostConditionInput {
  and: [ModelPostConditionInput]
  description: ModelStringInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelPostConditionInput
  or: [ModelPostConditionInput]
  owner: ModelStringInput
}

input ModelPostFilterInput {
  and: [ModelPostFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  image: ModelStringInput
  name: ModelStringInput
  not: ModelPostFilterInput
  or: [ModelPostFilterInput]
  owner: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelStringKeyConditionInput {
  beginsWith: String
  between: [String]
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
}

input ModelTodoConditionInput {
  and: [ModelTodoConditionInput]
  description: ModelStringInput
  name: ModelStringInput
  not: ModelTodoConditionInput
  or: [ModelTodoConditionInput]
}

input ModelTodoFilterInput {
  and: [ModelTodoFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelTodoFilterInput
  or: [ModelTodoFilterInput]
}

input ModelUserConditionInput {
  and: [ModelUserConditionInput]
  avatar: ModelStringInput
  not: ModelUserConditionInput
  or: [ModelUserConditionInput]
  status: ModelStringInput
  username: ModelStringInput
}

input ModelUserFilterInput {
  and: [ModelUserFilterInput]
  avatar: ModelStringInput
  id: ModelIDInput
  not: ModelUserFilterInput
  or: [ModelUserFilterInput]
  status: ModelStringInput
  username: ModelStringInput
}

input UpdateEntryInput {
  _version: Int
  description: String
  id: ID!
  image: String
  name: String
}

input UpdateFeedInput {
  _version: Int
  description: String
  feedEntryId: ID
  feedOwnerId: ID
  id: ID!
  postedAt: AWSDateTime
}

input UpdateNoteInput {
  _version: Int
  createdAt: String
  description: String
  id: ID!
  image: String
  name: String
  type: String
}

input UpdatePostInput {
  _version: Int
  description: String
  id: ID!
  image: String
  name: String
  owner: String
}

input UpdateTodoInput {
  _version: Int
  description: String
  id: ID!
  name: String
}

input UpdateUserInput {
  _version: Int
  avatar: String
  id: ID!
  status: String
  username: String
}
